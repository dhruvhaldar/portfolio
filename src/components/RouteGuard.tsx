"use client";import{useEffect,useState}from"react";import{usePathname}from"next/navigation";import{routes,protectedRoutes}from"@/app/resources";import{Flex,Spinner,Input,Button,Heading,Column}from"@/once-ui/components";const RouteGuard=({children})=>{const pathname=usePathname();const[isRouteEnabled,setIsRouteEnabled]=useState(false);const[isPasswordRequired,setIsPasswordRequired]=useState(false);const[password,setPassword]=useState("");const[isAuthenticated,setIsAuthenticated]=useState(false);const[error,setError]=useState(undefined);const[loading,setLoading]=useState(true);useEffect(()=>{const performChecks=async()=>{setLoading(true);setIsRouteEnabled(false);setIsPasswordRequired(false);setIsAuthenticated(false);const checkRouteEnabled=()=>{if(!pathname)return false;if(pathname in routes)return routes[pathname];const dynamicRoutes=["/publications","/work"];for(const route of dynamicRoutes)if(pathname?.startsWith(route)&&routes[route])return true;return false};const routeEnabled=checkRouteEnabled();setIsRouteEnabled(routeEnabled);if(protectedRoutes[pathname]){setIsPasswordRequired(true);const response=await fetch("/api/check-auth");if(response.ok)setIsAuthenticated(true)}setLoading(false)};performChecks()},[pathname]);const handlePasswordSubmit=async()=>{const response=await fetch("/api/authenticate",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({password})});if(response.ok){setIsAuthenticated(true);setError(undefined)}else{setError("Incorrect password")}};if(loading)return<Flex fillWidth paddingY="128" horizontal="center"><Spinner size="xl"/></Flex>;if(!isRouteEnabled)return<Flex fillWidth paddingY="128" horizontal="center"><Spinner size="xl"/></Flex>;if(isPasswordRequired&&!isAuthenticated)return<Column paddingY="128" maxWidth={24} gap="24" center><Heading align="center" wrap="balance">This page is password protected</Heading><Column fillWidth gap="8" horizontal="center"><Input id="password" label="Password" type="password" value={password} onChange={(e)=>setPassword(e.target.value)} errorMessage={error}/><Button onClick={handlePasswordSubmit}>Submit</Button></Column></Column>;return<>{children}</>;};export{RouteGuard};